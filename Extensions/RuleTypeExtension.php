<?php

namespace YusufTogtay\Extensions;

use YusufTogtay\Constants\Enums\RuleType;
use YusufTogtay\Base\Extensions\BaseEnumExtension;

class RuleTypeExtension extends BaseEnumExtension
{
    /**
     * Get the value of the given rule type.
     *
     * @param  string  $value
     * @return string|null
     */
    public static function getValue(string $value): ?string
    {
        $type = strtolower($value);

        switch ($type) {
            case 'accepted':
                return RuleType::ACCEPTED;
            case 'accepted_if':
                return RuleType::ACCEPTED_IF;
            case 'active_url':
                return RuleType::ACTIVE_URL;
            case 'after':
                return RuleType::AFTER;
            case 'after_or_equal':
                return RuleType::AFTER_OR_EQUAL;
            case 'alpha':
                return RuleType::ALPHA;
            case 'alpha_dash':
                return RuleType::ALPHA_DASH;
            case 'alpha_num':
                return RuleType::ALPHA_NUM;
            case 'array':
                return RuleType::ARRAY;
            case 'ascii':
                return RuleType::ASCII;
            case 'bail':
                return RuleType::BAIL;
            case 'before':
                return RuleType::BEFORE;
            case 'before_or_equal':
                return RuleType::BEFORE_OR_EQUAL;
            case 'between':
                return RuleType::BETWEEN;
            case 'boolean':
                return RuleType::BOOLEAN;
            case 'confirmed':
                return RuleType::CONFIRMED;
            case 'current_password':
                return RuleType::CURRENT_PASSWORD;
            case 'date':
                return RuleType::DATE;
            case 'date_equals':
                return RuleType::DATE_EQUALS;
            case 'date_format':
                return RuleType::DATE_FORMAT;
            case 'decimal':
                return RuleType::DECIMAL;
            case 'declined':
                return RuleType::DECLINED;
            case 'declined_if':
                return RuleType::DECLINED_IF;
            case 'different':
                return RuleType::DIFFERENT;
            case 'digits':
                return RuleType::DIGITS;
            case 'digits_between':
                return RuleType::DIGITS_BETWEEN;
            case 'dimension':
                return RuleType::DIMENSIONS;
            case 'distinct':
                return RuleType::DISTINCT;
            case 'dosent_start_with':
                return RuleType::DOSENT_START_WITH;
            case 'dosent_end_with':
                return RuleType::DOSENT_END_WITH;
            case 'email':
                return RuleType::EMAIL;
            case 'ends_with':
                return RuleType::ENDS_WITH;
            case 'enum':
                return RuleType::ENUM;
            case 'exclude':
                return RuleType::EXCLUDE;
            case 'exclude_if':
                return RuleType::EXCLUDE_IF;
            case 'exclude_unless':
                return RuleType::EXCLUDE_UNLESS;
            case 'exclude_with':
                return RuleType::EXCLUDE_WITH;
            case 'exclude_without':
                return RuleType::EXCLUDE_WITHOUT;
            case 'exists':
                return RuleType::EXISTS;
            case 'file':
                return RuleType::FILE;
            case 'filled':
                return RuleType::FILLED;
            case 'gt':
                return RuleType::GT;
            case 'gte':
                return RuleType::GTE;
            case 'image':
                return RuleType::IMAGE;
            case 'in':
                return RuleType::IN;
            case 'in_array':
                return RuleType::IN_ARRAY;
            case 'integer':
                return RuleType::INTEGER;
            case 'ip':
                return RuleType::IP;
            case 'ipv4':
                return RuleType::IPV4;
            case 'ipv6':
                return RuleType::IPV6;
            case 'json':
                return RuleType::JSON;
            case 'lt':
                return RuleType::LT;
            case 'lte':
                return RuleType::LTE;
            case 'lower_case':
                return RuleType::LOWER_CASE;
            case 'mac_address':
                return RuleType::MAC_ADDRESS;
            case 'max':
                return RuleType::MAX;
            case 'max_digits':
                return RuleType::MAX_DIGITS;
            case 'mime_types':
                return RuleType::MIME_TYPES;
            case 'mimes':
                return RuleType::MIMES;
            case 'min':
                return RuleType::MIN;
            case 'min_digits':
                return RuleType::MIN_DIGITS;
            case 'multiple_of':
                return RuleType::MULTIPLE_OF;
            case 'missing':
                return RuleType::MISSING;
            case 'missing_if':
                return RuleType::MISSING_IF;
            case 'missing_unless':
                return RuleType::MISSING_UNLESS;
            case 'missing_with':
                return RuleType::MISSING_WITH;
            case 'missing_with_all':
                return RuleType::MISSING_WITH_ALL;
            case 'not_in':
                return RuleType::NOT_IN;
            case 'not_regex':
                return RuleType::NOT_REGEX;
            case 'nullable':
                return RuleType::NULLABLE;
            case 'numeric':
                return RuleType::NUMERIC;
            case 'password':
                return RuleType::PASSWORD;
            case 'present':
                return RuleType::PRESENT;
            case 'prohibited':
                return RuleType::PROHIBITED;
            case 'prohibited_if':
                return RuleType::PROHIBITED_IF;
            case 'prohibited_unless':
                return RuleType::PROHIBITED_UNLESS;
            case 'prohibits':
                return RuleType::PROHIBITS;
            case 'regex':
                return RuleType::REGEX;
            case 'required':
                return RuleType::REQUIRED;
            case 'required_if':
                return RuleType::REQUIRED_IF;
            case 'required_unless':
                return RuleType::REQUIRED_UNLESS;
            case 'required_with':
                return RuleType::REQUIRED_WITH;
            case 'required_with_all':
                return RuleType::REQUIRED_WITH_ALL;
            case 'required_without':
                return RuleType::REQUIRED_WITHOUT;
            case 'required_without_all':
                return RuleType::REQUIRED_WITHOUT_ALL;
            case 'required_array_keys':
                return RuleType::REQUIRED_ARRAY_KEYS;
            case 'same':
                return RuleType::SAME;
            case 'size':
                return RuleType::SIZE;
            case 'starts_with':
                return RuleType::STARTS_WITH;
            case 'string':
                return RuleType::STRING;
            case 'time_zone':
                return RuleType::TIMEZONE;
            case 'unique':
                return RuleType::UNIQUE;
            case 'uppercase':
                return RuleType::UPPERCASE;
            case 'url':
                return RuleType::URL;
            case 'ulid':
                return RuleType::ULID;
            case 'uuid':
                return RuleType::UUID;
            default:
                return null;
        }
    }

    /**
     * Get the directory name of the HTML component for the given rule type.
     *
     * @param  RuleType  $ruleType
     * @return string|null
     */
    public static function getComponent(RuleType $ruleType): ?string
    {
        switch ($ruleType) {
            case RuleType::ACCEPTED:
                return 'accepted_component';
            case RuleType::ACCEPTED_IF:
                return 'accepted_if_component';
            case RuleType::ACTIVE_URL:
                return 'active_url_component';
            case RuleType::AFTER:
                return 'after_component';
            case RuleType::AFTER_OR_EQUAL:
                return 'after_or_equal_component';
            case RuleType::ALPHA:
                return 'alpha_component';
            case RuleType::ALPHA_DASH:
                return 'alpha_dash_component';
            case RuleType::ALPHA_NUM:
                return 'alpha_num_component';
            case RuleType::ARRAY:
                return 'array_component';
            case RuleType::ASCII:
                return 'ascii_component';
            case RuleType::BAIL:
                return 'bail_component';
            case RuleType::BEFORE:
                return 'before_component';
            case RuleType::BEFORE_OR_EQUAL:
                return 'before_or_equal_component';
            case RuleType::BETWEEN:
                return 'between_component';
            case RuleType::BOOLEAN:
                return 'boolean_component';
            case RuleType::CONFIRMED:
                return 'confirmed_component';
            case RuleType::CURRENT_PASSWORD:
                return 'current_password_component';
            case RuleType::DATE:
                return 'date_component';
            case RuleType::DATE_EQUALS:
                return 'date_equals_component';
            case RuleType::DATE_FORMAT:
                return 'date_format_component';
            case RuleType::DECIMAL:
                return 'decimal_component';
            case RuleType::DECLINED:
                return 'declined_component';
            case RuleType::DECLINED_IF:
                return 'declined_if_component';
            case RuleType::DIFFERENT:
                return 'different_component';
            case RuleType::DIGITS:
                return 'digits_component';
            case RuleType::DIGITS_BETWEEN:
                return 'digits_between_component';
            case RuleType::DIMENSIONS:
                return 'dimension_component';
            case RuleType::DISTINCT:
                return 'distinct_component';
            case RuleType::DOSENT_START_WITH:
                return 'dosent_start_with_component';
            case RuleType::DOSENT_END_WITH:
                return 'dosent_end_with_component';
            case RuleType::EMAIL:
                return 'email_component';
            case RuleType::ENDS_WITH:
                return 'ends_with_component';
            case RuleType::ENUM:
                return 'enum_component';
            case RuleType::EXCLUDE:
                return 'exclude_component';
            case RuleType::EXCLUDE_IF:
                return 'exclude_if_component';
            case RuleType::EXCLUDE_UNLESS:
                return 'exclude_unless_component';
            case RuleType::EXCLUDE_WITH:
                return 'exclude_with_component';
            case RuleType::EXCLUDE_WITHOUT:
                return 'exclude_without_component';
            case RuleType::EXISTS:
                return 'exists_component';
            case RuleType::FILE:
                return 'file_component';
            case RuleType::FILLED:
                return 'filled_component';
            case RuleType::GT:
                return 'gt_component';
            case RuleType::GTE:
                return 'gte_component';
            case RuleType::IMAGE:
                return 'image_component';
            case RuleType::IN:
                return 'in_component';
            case RuleType::IN_ARRAY:
                return 'in_array_component';
            case RuleType::INTEGER:
                return 'integer_component';
            case RuleType::IP:
                return 'ip_component';
            case RuleType::IPV4:
                return 'ipv4_component';
            case RuleType::IPV6:
                return 'ipv6_component';
            case RuleType::JSON:
                return 'json_component';
            case RuleType::LT:
                return 'lt_component';
            case RuleType::LTE:
                return 'lte_component';
            case RuleType::LOWER_CASE:
                return 'lower_case_component';
            case RuleType::MAC_ADDRESS:
                return 'mac_address_component';
            case RuleType::MAX:
                return 'max_component';
            case RuleType::MAX_DIGITS:
                return 'max_digits_component';
            case RuleType::MIME_TYPES:
                return 'mime_types_component';
            case RuleType::MIMES:
                return 'mimes_component';
            case RuleType::MIN:
                return 'min_component';
            case RuleType::MIN_DIGITS:
                return 'min_digits_component';
            case RuleType::MULTIPLE_OF:
                return 'multiple_of_component';
            case RuleType::MISSING:
                return 'missing_component';
            case RuleType::MISSING_IF:
                return 'missing_if_component';
            case RuleType::MISSING_UNLESS:
                return 'missing_unless_component';
            case RuleType::MISSING_WITH:
                return 'missing_with_component';
            case RuleType::MISSING_WITH_ALL:
                return 'missing_with_all_component';
            case RuleType::NOT_IN:
                return 'not_in_component';
            case RuleType::NOT_REGEX:
                return 'not_regex_component';
            case RuleType::NULLABLE:
                return 'nullable_component';
            case RuleType::NUMERIC:
                return 'numeric_component';
            case RuleType::PASSWORD:
                return 'password_component';
            case RuleType::PRESENT:
                return 'present_component';
            case RuleType::PROHIBITED:
                return 'prohibited_component';
            case RuleType::PROHIBITED_IF:
                return 'prohibited_if_component';
            case RuleType::PROHIBITED_UNLESS:
                return 'prohibited_unless_component';
            case RuleType::PROHIBITS:
                return 'prohibits_component';
            case RuleType::REGEX:
                return 'regex_component';
            case RuleType::REQUIRED:
                return 'required_component';
            case RuleType::REQUIRED_IF:
                return 'required_if_component';
            case RuleType::REQUIRED_UNLESS:
                return 'required_unless_component';
            case RuleType::REQUIRED_WITH:
                return 'required_with_component';
            case RuleType::REQUIRED_WITH_ALL:
                return 'required_with_all_component';
            case RuleType::REQUIRED_WITHOUT:
                return 'required_without_component';
            case RuleType::REQUIRED_WITHOUT_ALL:
                return 'required_without_all_component';
            case RuleType::REQUIRED_ARRAY_KEYS:
                return 'required_array_keys_component';
            case RuleType::SAME:
                return 'same_component';
            case RuleType::SIZE:
                return 'size_component';
            case RuleType::STARTS_WITH:
                return 'starts_with_component';
            case RuleType::STRING:
                return 'string_component';
            case RuleType::TIMEZONE:
                return 'time_zone_component';
            case RuleType::UNIQUE:
                return 'unique_component';
            case RuleType::UPPERCASE:
                return 'uppercase_component';
            case RuleType::URL:
                return 'url_component';
            case RuleType::ULID:
                return 'ulid_component';
            case RuleType::UUID:
                return 'uuid_component';
            default:
                return null;
        }
    }
}
